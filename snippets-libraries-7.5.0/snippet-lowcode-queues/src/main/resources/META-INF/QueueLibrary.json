{"id":"QueueLibrary","robotType":"NANO","mainClass":"com.appian.robot.core.template.QueueLibrary","actions":["init","closeQueue","cleanUp"],"conditionalActions":[],"fieldLinks":[],"actionDetails":[{"id":"init","implementation":"@Override\npublic void init() throws Exception {\n    server = JidokaFactory.getServer();\n    queueManager = server.getQueueManager();\n    INano.super.init();\n}"},{"id":"closeQueue","implementation":"@JidokaMethod(name = \"Closes the queue\", description = \"Closes the queue\")\npublic void closeQueue() throws IOException, JidokaQueueException {\n    ReserveQueueParameters rqp = new  ReserveQueueParameters().queueId(queue.queueId());\n    IReservedQueue reservedQueue = queueManager.reserveQueue(rqp);\n    if (reservedQueue == null || !EQueueCurrentState.FINISHED.equals(reservedQueue.queue().state()) || reservedQueue.queue().pendingItems() != 0 || reservedQueue.queue().inProcessItems() != 0) {\n        server.info(\"The current queue can't be reserved because it is not finished yet\");\n        if (reservedQueue != null && reservedQueue.queue() != null && reservedQueue.queue().state() != null) {\n            server.info(String.format(\"State: %s, Pending Items: %d, InProcess Items: %d\", reservedQueue.queue().state().name(), reservedQueue.queue().pendingItems(), reservedQueue.queue().inProcessItems()));\n        }\n        if (reservedQueue != null) {\n            ReleaseQueueParameters releaseQueueParameters = new  ReleaseQueueParameters();\n            releaseQueueParameters.setClosed(reservedQueue.queue().state().equals(EQueueCurrentState.CLOSED));\n            queueManager.releaseQueue(releaseQueueParameters);\n        }\n    }\n    ReleaseQueueParameters releaseQueueParameters = new  ReleaseQueueParameters();\n    releaseQueueParameters.closed(true);\n    queueManager.releaseQueue(releaseQueueParameters);\n    server.info(String.format(\"Queue %s closed\", queue.queueId()));\n}"},{"id":"cleanUp","implementation":"No source code available"}],"conditionalActionDetails":[],"sdkMethods":[{"id":"setQueue","returnClazz":"void","attributes":{"name":"Sets the queue to process","description":"Sets the queue to process","iconClass":"jf-console"},"parameters":[{"id":"Queue id to assign (Optional)","clazz":"String","enumValues":[],"attributes":{"defaultValue":"","name":"Queue id to assign (Optional)"},"nestedParameters":[]},{"id":"Name of the variable to store current item","clazz":"String","enumValues":[],"attributes":{"defaultValue":"","name":"Name of the variable to store current item"},"nestedParameters":[]}]},{"id":"getCurrentItemId","returnClazz":"void","attributes":{"name":"Gets queue item id","description":"Gets the current queue item id","iconClass":"jf-console"},"parameters":[{"id":"Name of the variable to store current item id","clazz":"String","enumValues":[],"attributes":{"defaultValue":"","name":"Name of the variable to store current item id"},"nestedParameters":[]}]},{"id":"updateItem","returnClazz":"void","attributes":{"name":"Updates current queue item","description":"Updates and release the current queue item. It should be WARN or OK.","iconClass":"jf-console"},"parameters":[{"id":"Item Result","clazz":"String","enumValues":[],"attributes":{"defaultValue":"OK","name":"Item Result"},"nestedParameters":[]},{"id":"Item Sub-Result","clazz":"String","enumValues":[],"attributes":{"defaultValue":"","name":"Item Sub-Result"},"nestedParameters":[]},{"id":"Result Detail","clazz":"String","enumValues":[],"attributes":{"defaultValue":"","name":"Result Detail"},"nestedParameters":[]}]},{"id":"closeQueue","returnClazz":"void","attributes":{"returnClass":"AS_DEFINED","name":"Closes the queue","description":"Closes the queue","iconClass":"jf-console"},"parameters":[]},{"id":"getNextItem","returnClazz":"java.lang.Boolean","attributes":{"returnClass":"AS_DEFINED","name":"Gets the next queue item","description":"Gets the next queue item","iconClass":"jf-console"},"parameters":[]}]}