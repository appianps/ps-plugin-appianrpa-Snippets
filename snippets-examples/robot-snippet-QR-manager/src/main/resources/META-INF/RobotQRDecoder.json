{"id":"RobotQRDecoder","robotType":"ROBOT","mainClass":"com.appian.rpa.RobotQRDecoder","actions":["start","openBrowser","navigateToWeb","scrapImage","end"],"conditionalActions":["startUp"],"fieldLinks":[],"actionDetails":[{"id":"start","implementation":"/**\n\t * Action \"start\".\n\t */\npublic void start() {\n    server.setNumberOfItems(1);\n}"},{"id":"openBrowser","implementation":"/**\n\t * Open Web Browser\n\t *\n\t * @throws Exception\n\t */\npublic void openBrowser() throws Exception {\n    server.info(\"Using the default browser CHROME\");\n    browser.setBrowserType(EBrowsers.CHROME);\n    browserType = EBrowsers.CHROME.name();\n    // Set timeout to 60 seconds\n    browser.setTimeoutSeconds(60);\n    // Init the browser module\n    browser.initBrowser();\n    // This command is uses to make visible in the desktop the page (IExplore issue)\n    if (EBrowsers.INTERNET_EXPLORER.name().equals(browserType)) {\n        client.clickOnCenter();\n        client.pause(3000);\n    }\n}"},{"id":"navigateToWeb","implementation":"/**\n\t * Navigate to Web Page\n\t *\n\t * @throws Exception\n\t */\npublic void navigateToWeb() throws Exception {\n    server.setCurrentItem(1, webURL);\n    // Navegate to HOME_URL address\n    browser.navigate(webURL);\n    // we save the screenshot, it can be viewed in robot execution trace page on the\n    // console\n    server.sendScreen(\"Screen after load page: \" + webURL);\n    server.setCurrentItemResultToOK(\"Success\");\n}"},{"id":"scrapImage","implementation":"public void scrapImage() {\n    // locate image, xpath, css etc\n    WebElement element = browser.getElement(By.className(\"qr\"));\n    // get images source\n    String elementsrc = element.getAttribute(\"src\");\n    try {\n        // generate url\n        URL imageURL = new  URL(elementsrc);\n        // read url and retrieve image\n        BufferedImage saveImage = ImageIO.read(imageURL);\n        // show image as log\n        falcon.sendImage(saveImage, \"QR Code\");\n        // decode image\n        String result = qrutils.readQRImage(saveImage);\n        server.warn(\"The QR Image contains this information: \" + result);\n    } catch (JidokaFatalException e) {\n        e.printStackTrace();\n    } catch (MalformedURLException e) {\n        throw new  JidokaFatalException(e.getMessage());\n    } catch (IOException e) {\n        throw new  JidokaFatalException(e.getMessage());\n    }\n}"},{"id":"end","implementation":"/**\n\t * Last action of the robot.\n\t */\npublic void end() {\n    server.info(\"End process\");\n}"}],"conditionalActionDetails":[{"id":"startUp","implementation":"@Override\npublic boolean startUp() throws Exception {\n    server = JidokaFactory.getServer();\n    client = IClient.getInstance(this);\n    browser = IWebBrowserSupport.getInstance(this, client);\n    falcon = IFalcon.getInstance(this, client);\n    qrutils = new  QRUtils();\n    webURL = server.getWorkflowParameters().get(QR_SITE_URL).getValue();\n    return IRobot.super.startUp();\n}"}],"sdkMethods":[]}