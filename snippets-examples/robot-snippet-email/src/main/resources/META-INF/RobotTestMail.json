{"id":"RobotTestMail","robotType":"ROBOT","mainClass":"com.appian.rpa.snippets.examples.email.RobotTestMail","actions":["start","prepareAttachment","sendMail","end"],"conditionalActions":["startUp"],"fieldLinks":[],"actionDetails":[{"id":"start","implementation":"/**\n\t * Start action\n\t */\npublic void start() {\n    this.emailManager = new  EmailManager();\n    velocityTemplate = Paths.get(server.getCurrentDir(), \"Templates/testTemplate.vm\").toFile();\n    currentItem = new  CovidModel();\n    currentItem.setAreaToSearch(\"USA\");\n    currentItem.setActiveCases(800000);\n    currentItem.setFatalCases(100000);\n    currentItem.setRecoveredCases(250000);\n    server.debug(\"Robot initialized\");\n}"},{"id":"prepareAttachment","implementation":"/**\n\t * Prepares the attachments by taking a screenshot to send.\n\t * \n\t * @throws IOException\n\t * @throws AWTException\n\t */\npublic void prepareAttachment() throws AWTException, IOException {\n    File outputfile1 = Paths.get(server.getCurrentDir(), \"Attachment1.png\").toFile();\n    BufferedImage bi = server.getScreen();\n    ImageIO.write(bi, \"png\", outputfile1);\n    this.attachments.add(outputfile1);\n}"},{"id":"sendMail","implementation":"/**\n\t * Sends the email with the given parameters, using the SMTP server\n\t * configuration.\n\t */\npublic void sendMail() {\n    String fromAddress = EInstructions.FROM.getInstruction().getAsString();\n    String[] toAddresses = EInstructions.TO.getInstruction().getAsString().split(\";\");\n    String[] ccAddresses = EInstructions.CC.getInstruction().getAsString().split(\";\");\n    String[] bccAddresses = EInstructions.BCC.getInstruction().getAsString().split(\";\");\n    String subject = EInstructions.SUBJECT.getInstruction().getAsString();\n    Map<String, Object> velocityContext = new  HashMap();\n    velocityContext.put(\"CURRENT_ITEM\", currentItem);\n    velocityContext.put(\"DATE\", new  Date(server.getExecution(0).getCurrentExecution().getExecutionDate()));\n    emailManager.useServerConfiguration(true).fromAddress(fromAddress).toAddress(toAddresses).ccAddress(ccAddresses).bccAddress(bccAddresses).subject(subject).attachments(this.attachments).velocityConfiguration(this.velocityTemplate, velocityContext).send();\n}"},{"id":"end","implementation":"/**\n\t * End action\n\t * \n\t * @throws Exception\n\t */\npublic void end() {\n}"}],"conditionalActionDetails":[{"id":"startUp","implementation":"/**\n\t * Startup method\n\t * \n\t * @throws Exception\n\t */\n@Override\npublic boolean startUp() throws Exception {\n    server = JidokaFactory.getServer();\n    return true;\n}"}],"sdkMethods":[]}